import {Client} from '@stomp/stompjs'
import SockJS from 'sockjs-client'

class WebSocketService {
    constructor() {
        this.client = null
        this.connected = false
        this.subscribers = new Map()
    }

    connect() {
        if (this.connected) {
            console.log('WebSocket already connected')
            return Promise.resolve()
        }

        return new Promise((resolve, reject) => {
            this.client = new Client({
                // WebSocket Ïó∞Í≤∞ ÏÑ§Ï†ï
                webSocketFactory: () => new SockJS('http://localhost:8084/ws'),

                // Ïó∞Í≤∞ ÏÑ±Í≥µ Ïãú
                onConnect: (frame) => {
                    console.log('‚úÖ WebSocket Connected:', frame)
                    this.connected = true
                    resolve()
                },

                // Ïó∞Í≤∞ Ïã§Ìå® Ïãú
                onStompError: (frame) => {
                    console.error('‚ùå WebSocket Error:', frame)
                    this.connected = false
                    reject(frame)
                },

                // Ïó∞Í≤∞ Ìï¥Ï†ú Ïãú
                onDisconnect: () => {
                    console.log('üîå WebSocket Disconnected')
                    this.connected = false
                },

                // ÎîîÎ≤ÑÍ∑∏ Î°úÍ∑∏ (Í∞úÎ∞úÏö©)
                debug: (str) => {
                    console.log('WebSocket Debug:', str)
                }
            })

            this.client.activate()
        })
    }

    disconnect() {
        if (this.client) {
            this.client.deactivate()
            this.connected = false
        }
    }

    // ÌäπÏ†ï ÌÜ†ÌîΩ Íµ¨ÎèÖ
    subscribe(topic, callback) {
        if (!this.connected) {
            console.warn('WebSocket not connected. Call connect() first.')
            return null
        }

        const subscription = this.client.subscribe(topic, (message) => {
            try {
                const data = JSON.parse(message.body)
                callback(data)
            } catch (error) {
                console.error('Error parsing WebSocket message:', error)
            }
        })

        this.subscribers.set(topic, subscription)
        return subscription
    }

    // Íµ¨ÎèÖ Ìï¥Ï†ú
    unsubscribe(topic) {
        const subscription = this.subscribers.get(topic)
        if (subscription) {
            subscription.unsubscribe()
            this.subscribers.delete(topic)
        }
    }

    // Î©îÏãúÏßÄ Ï†ÑÏÜ°
    send(destination, message) {
        if (this.connected && this.client) {
            this.client.publish({
                destination,
                body: JSON.stringify(message)
            })
        }
    }
}

const websocketService = new WebSocketService()
export default websocketService